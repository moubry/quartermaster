<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{buf=&quot;data&quot;*&quot;size&quot;I&quot;asize&quot;I&quot;unit&quot;I}' name='buf'>
<field type='*' name='data' declared_type='uint8_t*'/>
<field type='L' name='size' declared_type='size_t'/>
<field type='L' name='asize' declared_type='size_t'/>
<field type='L' name='unit' declared_type='size_t'/>
</struct>
<struct type='{html_renderopt=&quot;toc_data&quot;{?=&quot;header_count&quot;i&quot;current_level&quot;i&quot;level_offset&quot;i}&quot;flags&quot;I&quot;link_attributes&quot;^?}' name='html_renderopt'>
<field type='{_structhtml_renderopt=&quot;header_count&quot;i&quot;current_level&quot;i&quot;level_offset&quot;i}' name='toc_data' declared_type='struct html_renderopt::'/>
<field type='I' name='flags' declared_type='unsigned int'/>
<field function_pointer='true' type='^?' name='link_attributes' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
</struct>
<struct type='{sd_callbacks=&quot;blockcode&quot;^?&quot;blockquote&quot;^?&quot;blockhtml&quot;^?&quot;header&quot;^?&quot;hrule&quot;^?&quot;list&quot;^?&quot;listitem&quot;^?&quot;paragraph&quot;^?&quot;table&quot;^?&quot;table_row&quot;^?&quot;table_cell&quot;^?&quot;autolink&quot;^?&quot;codespan&quot;^?&quot;double_emphasis&quot;^?&quot;emphasis&quot;^?&quot;image&quot;^?&quot;linebreak&quot;^?&quot;link&quot;^?&quot;raw_html_tag&quot;^?&quot;triple_emphasis&quot;^?&quot;strikethrough&quot;^?&quot;superscript&quot;^?&quot;entity&quot;^?&quot;normal_text&quot;^?&quot;doc_header&quot;^?&quot;doc_footer&quot;^?}' name='sd_callbacks'>
<field function_pointer='true' type='^?' name='blockcode' declared_type='void (*)(struct buf *, struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='blockquote' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='blockhtml' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='header' declared_type='void (*)(struct buf *, struct buf *, int, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='i' declared_type='int'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='hrule' declared_type='void (*)(struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='list' declared_type='void (*)(struct buf *, struct buf *, int, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='i' declared_type='int'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='listitem' declared_type='void (*)(struct buf *, struct buf *, int, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='i' declared_type='int'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='paragraph' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='table' declared_type='void (*)(struct buf *, struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='table_row' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='table_cell' declared_type='void (*)(struct buf *, struct buf *, int, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='i' declared_type='int'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='autolink' declared_type='int (*)(struct buf *, struct buf *, enum mkd_autolink, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='i' declared_type='enum mkd_autolink'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='codespan' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='double_emphasis' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='emphasis' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='image' declared_type='int (*)(struct buf *, struct buf *, struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='linebreak' declared_type='int (*)(struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='link' declared_type='int (*)(struct buf *, struct buf *, struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='raw_html_tag' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='triple_emphasis' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='strikethrough' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='superscript' declared_type='int (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</field>
<field function_pointer='true' type='^?' name='entity' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='normal_text' declared_type='void (*)(struct buf *, struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^{buf=*III}' const='true' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='doc_header' declared_type='void (*)(struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
<field function_pointer='true' type='^?' name='doc_footer' declared_type='void (*)(struct buf *, void *)'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^v' declared_type='void*'/>
<retval type='v' declared_type='void'/>
</field>
</struct>
<struct type='{stack=&quot;item&quot;^^v&quot;size&quot;I&quot;asize&quot;I}' name='stack'>
<field type='^^v' name='item' declared_type='void**'/>
<field type='L' name='size' declared_type='size_t'/>
<field type='L' name='asize' declared_type='size_t'/>
</struct>
<constant type='[256C]' name='gperf_downcase' declared_type='unsigned char*'/>
<string_constant value='1.16.0' name='SUNDOWN_VERSION'/>
<enum value='-1' name='BUF_ENOMEM'/>
<enum value='0' name='BUF_OK'/>
<enum value='1' name='GPERF_CASE_STRNCMP'/>
<enum value='1' name='GPERF_DOWNCASE'/>
<enum value='512' name='HTML_ESCAPE'/>
<enum value='16' name='HTML_EXPAND_TABS'/>
<enum value='128' name='HTML_HARD_WRAP'/>
<enum value='32' name='HTML_SAFELINK'/>
<enum value='1' name='HTML_SKIP_HTML'/>
<enum value='4' name='HTML_SKIP_IMAGES'/>
<enum value='8' name='HTML_SKIP_LINKS'/>
<enum value='2' name='HTML_SKIP_STYLE'/>
<enum value='2' name='HTML_TAG_CLOSE'/>
<enum value='0' name='HTML_TAG_NONE'/>
<enum value='1' name='HTML_TAG_OPEN'/>
<enum value='64' name='HTML_TOC'/>
<enum value='256' name='HTML_USE_XHTML'/>
<enum value='2' name='MKDA_EMAIL'/>
<enum value='1' name='MKDA_NORMAL'/>
<enum value='0' name='MKDA_NOT_AUTOLINK'/>
<enum value='8' name='MKDEXT_AUTOLINK'/>
<enum value='4' name='MKDEXT_FENCED_CODE'/>
<enum value='256' name='MKDEXT_LAX_SPACING'/>
<enum value='1' name='MKDEXT_NO_INTRA_EMPHASIS'/>
<enum value='64' name='MKDEXT_SPACE_HEADERS'/>
<enum value='16' name='MKDEXT_STRIKETHROUGH'/>
<enum value='128' name='MKDEXT_SUPERSCRIPT'/>
<enum value='2' name='MKDEXT_TABLES'/>
<enum value='1' name='MKD_LIST_ORDERED'/>
<enum value='2' name='MKD_LI_BLOCK'/>
<enum value='3' name='MKD_TABLE_ALIGNMASK'/>
<enum value='3' name='MKD_TABLE_ALIGN_CENTER'/>
<enum value='1' name='MKD_TABLE_ALIGN_L'/>
<enum value='2' name='MKD_TABLE_ALIGN_R'/>
<enum value='4' name='MKD_TABLE_HEADER'/>
<enum value='1' name='SUNDOWN_VER_MAJOR'/>
<enum value='16' name='SUNDOWN_VER_MINOR'/>
<enum value='0' name='SUNDOWN_VER_REVISION'/>
<function name='bufcstr'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<retval type='*' const='true' declared_type='char*'/>
</function>
<function name='bufgrow'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='L' declared_type='size_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='bufnew'>
<arg type='L' declared_type='size_t'/>
<retval type='^{buf=*III}' declared_type='struct buf*'/>
</function>
<function name='bufprefix'>
<arg type='^{buf=*III}' name='buf' const='true' declared_type='struct buf*'/>
<arg type='*' name='prefix' const='true' declared_type='char*'/>
<retval type='i' declared_type='int'/>
</function>
<function variadic='true' name='bufprintf'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg printf_format='true' type='*' const='true' declared_type='char*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='bufput'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='^v' const='true' declared_type='void*'/>
<arg type='L' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='bufputc'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='i' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='bufputs'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='*' const='true' declared_type='char*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='bufrelease'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='bufreset'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='bufslurp'>
<arg type='^{buf=*III}' declared_type='struct buf*'/>
<arg type='L' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='find_block_tag' inline='true'>
<arg type='*' name='str' const='true' declared_type='char*'/>
<arg type='I' name='len' declared_type='unsigned int'/>
<retval type='*' const='true' declared_type='char*'/>
</function>
<function name='gperf_case_strncmp'>
<arg type='*' name='s1' const='true' declared_type='char*'/>
<arg type='*' name='s2' const='true' declared_type='char*'/>
<arg type='I' name='n' declared_type='unsigned int'/>
<retval type='i' declared_type='int'/>
</function>
<function name='hash_block_tag' inline='true'>
<arg type='*' name='str' const='true' declared_type='char*'/>
<arg type='I' name='len' declared_type='unsigned int'/>
<retval type='I' declared_type='unsigned int'/>
</function>
<function name='houdini_escape_href'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_escape_html'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_escape_html0'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<arg type='i' name='secure' declared_type='int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_escape_js'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_escape_uri'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_escape_url'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_escape_xml'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_unescape_html'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_unescape_js'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_unescape_uri'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='houdini_unescape_url'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='src' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sd_autolink__email'>
<arg type='^I' name='rewind_p' declared_type='size_t*'/>
<arg type='^{buf=*III}' name='link' declared_type='struct buf*'/>
<arg type='*' name='data' declared_type='uint8_t*'/>
<arg type='L' name='offset' declared_type='size_t'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='L' declared_type='size_t'/>
</function>
<function name='sd_autolink__url'>
<arg type='^I' name='rewind_p' declared_type='size_t*'/>
<arg type='^{buf=*III}' name='link' declared_type='struct buf*'/>
<arg type='*' name='data' declared_type='uint8_t*'/>
<arg type='L' name='offset' declared_type='size_t'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='L' declared_type='size_t'/>
</function>
<function name='sd_autolink__www'>
<arg type='^I' name='rewind_p' declared_type='size_t*'/>
<arg type='^{buf=*III}' name='link' declared_type='struct buf*'/>
<arg type='*' name='data' declared_type='uint8_t*'/>
<arg type='L' name='offset' declared_type='size_t'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='L' declared_type='size_t'/>
</function>
<function name='sd_autolink_issafe'>
<arg type='*' name='link' const='true' declared_type='uint8_t*'/>
<arg type='L' name='link_len' declared_type='size_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='sd_markdown_free'>
<arg type='^{sd_markdown=}' name='md' declared_type='struct sd_markdown*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sd_markdown_new'>
<arg type='I' name='extensions' declared_type='unsigned int'/>
<arg type='L' name='max_nesting' declared_type='size_t'/>
<arg type='^{sd_callbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}' name='callbacks' const='true' declared_type='struct sd_callbacks*'/>
<arg type='^v' name='opaque' declared_type='void*'/>
<retval type='^{sd_markdown=}' declared_type='struct sd_markdown*'/>
</function>
<function name='sd_markdown_render'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='document' const='true' declared_type='uint8_t*'/>
<arg type='L' name='doc_size' declared_type='size_t'/>
<arg type='^{sd_markdown=}' name='md' declared_type='struct sd_markdown*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sd_version'>
<arg type='^i' name='major' declared_type='int*'/>
<arg type='^i' name='minor' declared_type='int*'/>
<arg type='^i' name='revision' declared_type='int*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sdhtml_is_tag'>
<arg type='*' name='tag_data' const='true' declared_type='uint8_t*'/>
<arg type='L' name='tag_size' declared_type='size_t'/>
<arg type='*' name='tagname' const='true' declared_type='char*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='sdhtml_renderer'>
<arg type='^{sd_callbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}' name='callbacks' declared_type='struct sd_callbacks*'/>
<arg type='^{html_renderopt={?=iii}I^?}' name='options_ptr' declared_type='struct html_renderopt*'/>
<arg type='I' name='render_flags' declared_type='unsigned int'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sdhtml_smartypants'>
<arg type='^{buf=*III}' name='ob' declared_type='struct buf*'/>
<arg type='*' name='text' const='true' declared_type='uint8_t*'/>
<arg type='L' name='size' declared_type='size_t'/>
<retval type='v' declared_type='void'/>
</function>
<function name='sdhtml_toc_renderer'>
<arg type='^{sd_callbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}' name='callbacks' declared_type='struct sd_callbacks*'/>
<arg type='^{html_renderopt={?=iii}I^?}' name='options_ptr' declared_type='struct html_renderopt*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='stack_free'>
<arg type='^{stack=^^vII}' declared_type='struct stack*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='stack_grow'>
<arg type='^{stack=^^vII}' declared_type='struct stack*'/>
<arg type='L' declared_type='size_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='stack_init'>
<arg type='^{stack=^^vII}' declared_type='struct stack*'/>
<arg type='L' declared_type='size_t'/>
<retval type='i' declared_type='int'/>
</function>
<function name='stack_pop'>
<arg type='^{stack=^^vII}' declared_type='struct stack*'/>
<retval type='^v' declared_type='void*'/>
</function>
<function name='stack_push'>
<arg type='^{stack=^^vII}' declared_type='struct stack*'/>
<arg type='^v' declared_type='void*'/>
<retval type='i' declared_type='int'/>
</function>
<function name='stack_top'>
<arg type='^{stack=^^vII}' declared_type='struct stack*'/>
<retval type='^v' declared_type='void*'/>
</function>
<class name='SundownWrapper'>
<method selector='convertMarkdownFileAtPath:' class_method='true'>
<arg index='0' type='@' name='path' declared_type='NSString*'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='convertMarkdownFileAtURL:' class_method='true'>
<arg index='0' type='@' name='url' declared_type='NSURL*'/>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='convertMarkdownString:' class_method='true'>
<arg index='0' type='@' name='markdown' declared_type='NSString*'/>
<retval type='@' declared_type='NSString*'/>
</method>
</class>
</signatures>
